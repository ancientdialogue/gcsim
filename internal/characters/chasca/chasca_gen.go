// Code generated by "pipeline"; DO NOT EDIT.
package chasca

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	3: {"travel"},
	7: {"hold", "travel", "weakspot"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Chasca, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}
var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
		attack_4,
	}
)
var (
	// attack: aim = [8]
	aim = []float64{
		43.86/100,
		47.43/100,
		51/100,
		56.1/100,
		59.67/100,
		63.75/100,
		69.36/100,
		74.97/100,
		80.58/100,
		86.7/100,
		92.82/100,
		98.94/100,
		105.06/100,	
		111.18/100,
		117.3/100,
	}
	// attack: attack_1 = [0]
	attack_1 = []float64{
		48.01/100,
		51.92/100,
		55.82/100,
		61.41/100,
		65.31/100,
		69.78/100,
		75.92/100,
		82.06/100,
		88.2/100,
		94.9/100,
		101.6/100,
		108.3/100,
		115/100,
		121.69/100,
		128.39/100,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		44.59/100,
		48.22/100,
		51.85/100,
		57.03/100,
		60.66/100,
		64.81/100,
		70.51/100,
		76.22/100,
		81.92/100,
		88.14/100,
		94.36/100,
		100.58/100,
		106.8/100,
		113.03/100,
		119.25/100,
	}
	// attack: attack_3 = [2 2]
	attack_3 = [][]float64{
		{
			29.7/100,
			32.11/100,
			34.53/100,
			37.99/100,
			40.4/100,
			43.17/100,
			46.96/100,
			50.76/100,
			54.56/100,
			58.7/100,
			62.85/100,
			66.99/100,
			71.14/100,
			75.28/100,
			79.42/100,
		},
		{
			29.7/100,
			32.11/100,
			34.53/100,
			37.99/100,
			40.4/100,
			43.17/100,
			46.96/100,
			50.76/100,
			54.56/100,
			58.7/100,
			62.85/100,
			66.99/100,
			71.14/100,
			75.28/100,
			79.42/100,
		},
	}
	// attack: attack_4 = [4]
	attack_4 = [][]float64{
		{	
			25.47/100,
			27.54/100,
			29.61/100,
			32.57/100,
			34.65/100,
			37.02/100,
			40.27/100,
			43.53/100,
			46.79/100,
			50.34/100,
			53.9/100,
			57.45/100,
			61/100,
			64.56/100,
			68.11/100,
		},
		{
			25.47/100,
			27.54/100,
			29.61/100,
			32.57/100,
			34.65/100,
			37.02/100,
			40.27/100,
			43.53/100,
			46.79/100,
			50.34/100,
			53.9/100,
			57.45/100,
			61/100,
			64.56/100,
			68.11/100,
		},
		{
			25.47/100,
			27.54/100,
			29.61/100,
			32.57/100,
			34.65/100,
			37.02/100,
			40.27/100,
			43.53/100,
			46.79/100,
			50.34/100,
			53.9/100,
			57.45/100,
			61/100,
			64.56/100,
			68.11/100,
		},
	}
	// attack: fullaim = [9]
	fullaim = []float64{
		124/100,
		133.3/100,
		142.6/100,
		155/100,
		164.3/100,
		173.6/100,
		186/100,
		198.4/100,
		210.8/100,
		223.2/100,
		235.6/100,
		248/100,
		263.5/100,
		279/100,
		294.5/100,
	}
	// skill: skillDMG = [0]
	skillDMG = []float64{
		60/100,
		64.5/100,
		69/100,
		75/100,
		79.5/100,
		84/100,
		90/100,
		96/100,
		102/100,
		108/100,
		114/100,
		120/100,
		127.5/100,
		135/100,
		142.5/100,
	}
	// skill: skillMultitarget = [1]
	skillMultitarget = []float64{
		36/100,
		38.7/100,
		41.4/100,
		45/100,
		47.7/100,
		50.4/100,
		54/100,
		57.6/100,
		61.2/100,
		64.8/100,
		68.4/100,
		72/100,
		76.5/100,
		81/100,
		85.5/100,
	}
	// Skill: skillShadowhunt = [2]
	skillShadowhunt = []float64{
		48.8/100,
		52.46/100,
		56.12/100,
		61/100,
		64.66/100,
		68.32/100,
		73.2/100,
		78.08/100,
		82.96/100,
		87.84/100,
		92.72/100,
		97.6/100,
		103.7/100,
		109.8/100,
		115.9/100,
	}
	// Skill: skillShiningShadowhunt = [3]
	skillShiningShadowhunt = []float64{
		166.57/100,
		179.06/100,
		191.56/100,
		208.22/100,
		220.71/100,
		233.2/100,
		249.86/100,
		266.52/100,
		283.17/100,
		299.83/100,
		316.49/100,
		333.14/100,
		353.97/100,
		374.79/100,
		395.61/100,
	}
	burstDMG = []float64{
		88/100,
		94.6/100,
		101.2/100,
		110/100,
		116.6/100,
		123.2/100,
		132/100,
		140.8/100,
		149.6/100,
		158.4/100,
		167.2/100,
		176/100,
		187/100,
		198/100,
		209/100,
	}
	burstSoulseeker = []float64{
		103.4/100,
		111.16/100,
		118.91/100,
		129.25/100,
		137.01/100,
		144.76/100,
		155.1/100,
		165.44/100,
		175.78/100,
		186.12/100,
		196.46/100,
		206.8/100,
		219.73/100,
		232.65/100,
		245.58/100,
	}
	burstRadiantSoulseeker = []float64{
		206.8/100,
		222.31/100,
		237.82/100,
		258.5/100,
		274.01/100,
		289.52/100,
		310.2/100,
		330.88/100,
		351.56/100,
		372.24/100,
		392.92/100,
		413.6/100,
		439.45/100,
		465.3/100,
		491.15/100,
	}
)
